generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:root@localhost:5432/armssteel_ims"
}

model Product {
  id           String        @id @default(cuid())
  name         String
  category     Category      @relation("ProductToCategory", fields: [categoryId], references: [id])
  categoryId   String
  description  String?       @default("")
  sku          String        @unique
  quantity     Int           @default(0) @db.Check("quantity >= 0")
  unit         String
  minStock     Int           @default(0) @db.Check("minStock >= 0")
  maxStock     Int?          @db.Check("maxStock >= 0")
  location     String?       @default("")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  orderItems   OrderItem[]

  @@index([categoryId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @default("")
  products    Product[] @relation("ProductToCategory")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}

model Transaction {
  id        String          @id @default(cuid())
  type      TransactionType
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int             @db.Check("quantity >= 0")
  notes     String?         @default("")
  createdAt DateTime        @default(now())

  @@index([productId])
  @@index([type])
  @@index([createdAt])
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  type        OrderType
  status      OrderStatus @default(PENDING)
  customer    String?     @default("")
  supplier    String?     @default("")
  items       OrderItem[]
  totalAmount Float        @db.Check("totalAmount >= 0")
  notes       String?     @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  quantity   Int       @db.Check("quantity >= 0")
  unitPrice  Float     @db.Check("unitPrice >= 0")
  totalPrice Float     @db.Check("totalPrice >= 0")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([orderId])
  @@index([productId])
}

enum TransactionType {
  INBOUND
  OUTBOUND
  ADJUSTMENT
}

enum OrderType {
  PURCHASE
  SALES
}

enum OrderStatus {
  PENDING
  APPROVED
  PROCESSING
  COMPLETED
  CANCELLED
}